CREATE OR REPLACE PROCEDURE P_RADAR_C_TLOAD_NQI_HOUR_INS (P_FECHA_DESDE IN CHAR, P_FECHA_HASTA IN CHAR, P_OSSRC IN CHAR) IS

-- Autor: Mario Heredia. Fecha: 20.10.2014.
-- Actualizacion: Mario Heredia. Fecha: 23.01.2015. Motivo: Incorporacion de mehRejectHsdsch.
-- Actualizacion: Mario Heredia. Fecha: 04.12.2015. Motivo: Se quitan algunos parallel para evitar fallas en sesiones.
-- Actualizacion: Mario Heredia. Fecha: 10.12.2015. Motivo: Se quitan mas parallel.
-- Actualizacion: Monica Pellegrini. Fecha: 09.11.2016. Motivo: se crea una nueva tabla para que corra hourly para el tablero nqi.
-- Actualizacion: Mario Heredia. Fecha: 16.05.2017.
-- Actualizacion: Mario Heredia. Fecha: 31.05.2017. Motivo: Migracion de Perdido a Falda.

--------------------------------------------------------------------------------------------------------------------------------
-- SERVICE
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_RDR_SRV_WCE_HOUR (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (SRV 4)*/
       AUX.PERIOD_START_TIME,
       AUX.OSSRC,
       AUX.WCELL_GID,
       NVL(SRV.AVG_RAB_HLD_TM_CS_VOICE           , 0) AVG_RAB_HLD_TM_CS_VOICE
  FROM AUX_UMTSCLDDNQIINDTRFCLD    AUX,
       UMTS_C_NSN_SERVLEV_MNC1_RAW@SMART.WORLD SRV
 WHERE AUX.PERIOD_START_TIME = SRV.PERIOD_START_TIME (+)
   AND AUX.WCELL_GID = SRV.WCELL_GID (+)
   AND AUX.OSSRC = SRV.OSSRC (+)
   AND AUX.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND AUX.OSSRC = RC
 ORDER BY PERIOD_START_TIME, WCELL_GID;

TYPE T_RDR_SRV_WCE_HOUR IS TABLE OF C_RDR_SRV_WCE_HOUR%ROWTYPE;
RDR_SRV_WCE_HOUR T_RDR_SRV_WCE_HOUR;

--------------------------------------------------------------------------------------------------------------------------------
-- TRAFFIC
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_RDR_TRF_WCE_HOUR (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (TRF 4) */
       AUX.PERIOD_START_TIME,
       AUX.OSSRC,
       AUX.WCELL_GID,

       NVL(TRF.DCH_ALLO_DURA_LINK_13_6_SRNC      , 0) DCH_ALLO_DURA_LINK_13_6_SRNC              ,

       NVL(TRF.DUR_FOR_AMR_12_2_DL_IN_SRNC       , 0) DUR_FOR_AMR_12_2_DL_IN_SRNC               ,
       NVL(TRF.DUR_FOR_AMR_4_75_DL_IN_SRNC       , 0) DUR_FOR_AMR_4_75_DL_IN_SRNC               ,
       NVL(TRF.DUR_FOR_AMR_5_9_DL_IN_SRNC        , 0) DUR_FOR_AMR_5_9_DL_IN_SRNC                ,

       NVL(TRF.DUR_PS_BACKG_64_DL_IN_SRNC        , 0) DUR_PS_BACKG_64_DL_IN_SRNC                ,
       NVL(TRF.DUR_PS_BACKG_128_DL_IN_SRNC       , 0) DUR_PS_BACKG_128_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_BACKG_256_DL_IN_SRNC       , 0) DUR_PS_BACKG_256_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_BACKG_8_DL_IN_SRNC         , 0) DUR_PS_BACKG_8_DL_IN_SRNC                 ,
       NVL(TRF.DUR_PS_BACKG_16_DL_IN_SRNC        , 0) DUR_PS_BACKG_16_DL_IN_SRNC                ,
       NVL(TRF.DUR_PS_BACKG_32_DL_IN_SRNC        , 0) DUR_PS_BACKG_32_DL_IN_SRNC                ,
       NVL(TRF.DUR_PS_BACKG_320_DL_IN_SRNC       , 0) DUR_PS_BACKG_320_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_BACKG_384_DL_IN_SRNC       , 0) DUR_PS_BACKG_384_DL_IN_SRNC               ,

       NVL(TRF.DUR_PS_INTERA_384_DL_IN_SRNC      , 0) DUR_PS_INTERA_384_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_INTERA_128_DL_IN_SRNC      , 0) DUR_PS_INTERA_128_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_INTERA_256_DL_IN_SRNC      , 0) DUR_PS_INTERA_256_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_INTERA_320_DL_IN_SRNC      , 0) DUR_PS_INTERA_320_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_INTERA_16_DL_IN_SRNC       , 0) DUR_PS_INTERA_16_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_INTERA_64_DL_IN_SRNC       , 0) DUR_PS_INTERA_64_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_INTERA_8_DL_IN_SRNC        , 0) DUR_PS_INTERA_8_DL_IN_SRNC                ,
       NVL(TRF.DUR_PS_INTERA_32_DL_IN_SRNC       , 0) DUR_PS_INTERA_32_DL_IN_SRNC               ,

       NVL(TRF.DUR_PS_STREAM_128_DL_IN_SRNC      , 0) DUR_PS_STREAM_128_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_STREAM_256_DL_IN_SRNC      , 0) DUR_PS_STREAM_256_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_STREAM_320_DL_IN_SRNC      , 0) DUR_PS_STREAM_320_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_STREAM_384_DL_IN_SRNC      , 0) DUR_PS_STREAM_384_DL_IN_SRNC              ,
       NVL(TRF.DUR_PS_STREAM_16_DL_IN_SRNC       , 0) DUR_PS_STREAM_16_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_STREAM_32_DL_IN_SRNC       , 0) DUR_PS_STREAM_32_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_STREAM_64_DL_IN_SRNC       , 0) DUR_PS_STREAM_64_DL_IN_SRNC               ,
       NVL(TRF.DUR_PS_STREAM_8_DL_IN_SRNC        , 0) DUR_PS_STREAM_8_DL_IN_SRNC                ,

       NVL(TRF.MEH_REJECT_HSDSCH                 , 0) MEH_REJECT_HSDSCH                         ,

       NVL(TRF.ALLO_HS_DSCH_FLOW_INT             , 0) +
       NVL(TRF.ALLO_HS_DSCH_FLOW_BGR             , 0) +
       NVL(TRF.DCH_SEL_MAX_HSDPA_USERS_INT       , 0) +
       NVL(TRF.DCH_SEL_MAX_HSDPA_USERS_BGR       , 0) +
       NVL(TRF.REJ_HS_DSCH_RET_INT               , 0) +
       NVL(TRF.REJ_HS_DSCH_RET_BGR               , 0) +
       NVL(TRF.SETUP_FAIL_RNC_HS_DSCH_INT        , 0) +
       NVL(TRF.SETUP_FAIL_RNC_HS_DSCH_BGR        , 0) +
       NVL(TRF.SETUP_FAIL_UE_HS_DSCH_INT         , 0) +
       NVL(TRF.SETUP_FAIL_UE_HS_DSCH_BGR         , 0) +
       NVL(TRF.SETUP_FAIL_BTS_HS_DSCH_INT        , 0) +
       NVL(TRF.SETUP_FAIL_BTS_HS_DSCH_BGR        , 0) +
       NVL(TRF.SETUP_FAIL_IUB_HS_TOTAL_INT       , 0) +
       NVL(TRF.SETUP_FAIL_IUB_HS_TOTAL_BGR       , 0) HSDPA_ACCESS_USR_DEN

  FROM AUX_UMTSCLDDNQIINDTRFCLD    AUX,
       UMTS_C_NSN_TRAFFIC_MNC1_RAW@SMART.WORLD TRF
 WHERE AUX.PERIOD_START_TIME = TRF.PERIOD_START_TIME (+)
   AND AUX.WCELL_GID = TRF.WCELL_GID (+)
   AND AUX.OSSRC = TRF.OSSRC (+)
   AND AUX.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND AUX.OSSRC = RC
 ORDER BY PERIOD_START_TIME, WCELL_GID;

TYPE T_RDR_TRF_WCE_HOUR IS TABLE OF C_RDR_TRF_WCE_HOUR%ROWTYPE;
RDR_TRF_WCE_HOUR T_RDR_TRF_WCE_HOUR;

--------------------------------------------------------------------------------------------------------------------------------
-- CELLRES
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_RDR_CER_WCE_HOUR (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (CER 4) */
       AUX.PERIOD_START_TIME,
       AUX.OSSRC,
       AUX.WCELL_GID,
       NVL(CER.DENOM_HSDPA_USERS_PER_CELL        , 0) DENOM_HSDPA_USERS_PER_CELL                ,
       NVL(CER.SUM_HSDPA_USERS_IN_CELL           , 0) SUM_HSDPA_USERS_IN_CELL
  FROM AUX_UMTSCLDDNQIINDTRFCLD    AUX,
       UMTS_C_NSN_CELLRES_MNC1_RAW@SMART.WORLD CER
 WHERE AUX.PERIOD_START_TIME = CER.PERIOD_START_TIME (+)
   AND AUX.WCELL_GID = CER.WCELL_GID (+)
   AND AUX.OSSRC = CER.OSSRC (+)
   AND AUX.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND AUX.OSSRC = RC
 ORDER BY PERIOD_START_TIME, WCELL_GID;

TYPE T_RDR_CER_WCE_HOUR IS TABLE OF C_RDR_CER_WCE_HOUR%ROWTYPE;
RDR_CER_WCE_HOUR T_RDR_CER_WCE_HOUR;


--------------------------------------------------------------------------------------------------------------------------------
-- CELLTP
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_RDR_CET_WCE_HOUR ( FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (CET 4) */
       AUX.PERIOD_START_TIME,
       AUX.OSSRC,
       AUX.WCELL_GID,
       NVL(CET.INTERA_DL_DATA                    , 0) INTERA_DL_DATA                            ,
       NVL(CET.BGR_DL_DATA                       , 0) BGR_DL_DATA                               ,
       NVL(CET.PS_STREA_DL_DATA                  , 0) PS_STREA_DL_DATA
  FROM AUX_UMTSCLDDNQIINDTRFCLD   AUX,
       UMTS_C_NSN_CELLTP_MNC1_RAW@SMART.WORLD CET
 WHERE AUX.PERIOD_START_TIME = CET.PERIOD_START_TIME (+)
   AND AUX.WCELL_GID = CET.WCELL_GID (+)
   AND AUX.OSSRC = CET.OSSRC (+)
   AND AUX.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND AUX.OSSRC = RC
 ORDER BY PERIOD_START_TIME, WCELL_GID;

TYPE T_RDR_CET_WCE_HOUR IS TABLE OF C_RDR_CET_WCE_HOUR%ROWTYPE;
RDR_CET_WCE_HOUR T_RDR_CET_WCE_HOUR;

--------------------------------------------------------------------------------------------------------------------------------
-- CELTPW
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_RDR_TPW_WCE_HOUR (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (TPW 4) */
       AUX.PERIOD_START_TIME,
       AUX.OSSRC,
       AUX.WCELL_GID,
       NVL(TPW.CCH_DATA_CELL_DL                    , 0) CCH_DATA_CELL_DL
  FROM AUX_UMTSCLDDNQIINDTRFCLD   AUX,
       UMTS_C_NSN_CELTPW_MNC1_RAW@SMART.WORLD TPW
 WHERE AUX.PERIOD_START_TIME = TPW.PERIOD_START_TIME (+)
   AND AUX.WCELL_GID = TPW.WCELL_GID (+)
   AND AUX.OSSRC = TPW.OSSRC (+)
   AND AUX.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND AUX.OSSRC = RC
 ORDER BY PERIOD_START_TIME, WCELL_GID;

TYPE T_RDR_TPW_WCE_HOUR IS TABLE OF C_RDR_TPW_WCE_HOUR%ROWTYPE;
RDR_TPW_WCE_HOUR T_RDR_TPW_WCE_HOUR;

--------------------------------------------------------------------------------------------------------------------------------
-- AUX
--------------------------------------------------------------------------------------------------------------------------------

CURSOR C_AUXUMTSCLDDRDRINDTRFFCLD (FECHA_DESDE VARCHAR2, FECHA_HASTA VARCHAR2, RC VARCHAR2) IS
SELECT /* PARALLEL (SRV 4) */
       SRV.PERIOD_START_TIME,
       SRV.OSSRC,
       SRV.WCELL_GID
  FROM UMTS_C_NSN_SERVLEV_MNC1_RAW@SMART.WORLD SRV
 WHERE SRV.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND OSSRC = RC
 UNION
SELECT /* PARALLEL (CER 4) */
       CER.PERIOD_START_TIME,
       CER.OSSRC,
       CER.WCELL_GID
  FROM UMTS_C_NSN_CELLRES_MNC1_RAW@SMART.WORLD CER
 WHERE CER.PERIOD_START_TIME BETWEEN TO_DATE(FECHA_DESDE, 'DD.MM.YYYY HH24')
                                 AND TO_DATE(FECHA_HASTA, 'DD.MM.YYYY HH24')
   AND OSSRC = RC;

TYPE R_AUXUMTSCLDDRDRINDTRFFCLD IS RECORD (PERIOD_START_TIME DATE         ,
                                           OSSRC             VARCHAR2(10) ,
                                           WCELL_GID         NUMBER       );

TYPE T_AUXUMTSCLDDRDRINDTRFFCLD IS TABLE OF R_AUXUMTSCLDDRDRINDTRFFCLD INDEX BY PLS_INTEGER;
AUXUMTSCLDDRDRINDTRFFCLD T_AUXUMTSCLDDRDRINDTRFFCLD;

TYPE T_AU2UMTSCLDDRDRINDTRFFCLD IS TABLE OF CLDD_C_RADAR_AUX_HOUR%ROWTYPE INDEX BY PLS_INTEGER;
UMTSCLDDRDRINDTRFFCLD T_AU2UMTSCLDDRDRINDTRFFCLD;

C_LIMIT PLS_INTEGER := 1000;

CNT  NUMBER := 0;
PCNT NUMBER := 0;

BEGIN

-- Truncate Aux
EXECUTE IMMEDIATE 'TRUNCATE TABLE MHEREDIA.AUX_UMTSCLDDNQIINDTRFCLD';

-- Insert Aux Table

OPEN C_AUXUMTSCLDDRDRINDTRFFCLD (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);

LOOP

FETCH C_AUXUMTSCLDDRDRINDTRFFCLD BULK COLLECT INTO AUXUMTSCLDDRDRINDTRFFCLD LIMIT C_LIMIT;

FORALL I IN 1 .. AUXUMTSCLDDRDRINDTRFFCLD.COUNT
INSERT INTO AUX_UMTSCLDDNQIINDTRFCLD VALUES AUXUMTSCLDDRDRINDTRFFCLD(I);

EXIT WHEN C_AUXUMTSCLDDRDRINDTRFFCLD%NOTFOUND;

END LOOP;

CLOSE C_AUXUMTSCLDDRDRINDTRFFCLD;

-- Tratamiento

OPEN C_RDR_SRV_WCE_HOUR (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);
OPEN C_RDR_TRF_WCE_HOUR (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);
OPEN C_RDR_CER_WCE_HOUR (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);
OPEN C_RDR_CET_WCE_HOUR (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);
OPEN C_RDR_TPW_WCE_HOUR (P_FECHA_DESDE, P_FECHA_HASTA, P_OSSRC);

LOOP

FETCH C_RDR_SRV_WCE_HOUR BULK COLLECT INTO RDR_SRV_WCE_HOUR LIMIT C_LIMIT;
FETCH C_RDR_TRF_WCE_HOUR BULK COLLECT INTO RDR_TRF_WCE_HOUR LIMIT C_LIMIT;
FETCH C_RDR_CER_WCE_HOUR BULK COLLECT INTO RDR_CER_WCE_HOUR LIMIT C_LIMIT;
FETCH C_RDR_CET_WCE_HOUR BULK COLLECT INTO RDR_CET_WCE_HOUR LIMIT C_LIMIT;
FETCH C_RDR_TPW_WCE_HOUR BULK COLLECT INTO RDR_TPW_WCE_HOUR LIMIT C_LIMIT;

FOR I IN 1 .. RDR_SRV_WCE_HOUR.COUNT LOOP

CNT  :=  CNT + 1;
PCNT := PCNT + 1;

-- Au2 Radar

UMTSCLDDRDRINDTRFFCLD(I).PERIOD_START_TIME                 := RDR_SRV_WCE_HOUR(I).PERIOD_START_TIME                 ;
UMTSCLDDRDRINDTRFFCLD(I).OSSRC                             := RDR_SRV_WCE_HOUR(I).OSSRC                             ;
UMTSCLDDRDRINDTRFFCLD(I).WCELL_GID                         := RDR_SRV_WCE_HOUR(I).WCELL_GID                         ;
UMTSCLDDRDRINDTRFFCLD(I).AVG_RAB_HLD_TM_CS_VOICE           := RDR_SRV_WCE_HOUR(I).AVG_RAB_HLD_TM_CS_VOICE           ;

UMTSCLDDRDRINDTRFFCLD(I).DENOM_HSDPA_USERS_PER_CELL        := RDR_CER_WCE_HOUR(I).DENOM_HSDPA_USERS_PER_CELL        ;
UMTSCLDDRDRINDTRFFCLD(I).SUM_HSDPA_USERS_IN_CELL           := RDR_CER_WCE_HOUR(I).SUM_HSDPA_USERS_IN_CELL           ;

UMTSCLDDRDRINDTRFFCLD(I).DCH_ALLO_DURA_LINK_13_6_SRNC      := RDR_TRF_WCE_HOUR(I).DCH_ALLO_DURA_LINK_13_6_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_FOR_AMR_12_2_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_FOR_AMR_12_2_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_FOR_AMR_4_75_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_FOR_AMR_4_75_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_FOR_AMR_5_9_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_FOR_AMR_5_9_DL_IN_SRNC        ;

UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_8_DL_IN_SRNC         := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_8_DL_IN_SRNC         ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_16_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_16_DL_IN_SRNC        ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_32_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_32_DL_IN_SRNC        ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_64_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_64_DL_IN_SRNC        ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_128_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_128_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_256_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_256_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_320_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_320_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_BACKG_384_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_BACKG_384_DL_IN_SRNC       ;

UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_8_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_8_DL_IN_SRNC        ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_16_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_16_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_32_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_32_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_64_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_64_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_128_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_128_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_256_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_256_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_320_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_320_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_INTERA_384_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_INTERA_384_DL_IN_SRNC      ;

UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_8_DL_IN_SRNC        := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_8_DL_IN_SRNC        ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_16_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_16_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_32_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_32_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_64_DL_IN_SRNC       := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_64_DL_IN_SRNC       ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_128_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_128_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_256_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_256_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_320_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_320_DL_IN_SRNC      ;
UMTSCLDDRDRINDTRFFCLD(I).DUR_PS_STREAM_384_DL_IN_SRNC      := RDR_TRF_WCE_HOUR(I).DUR_PS_STREAM_384_DL_IN_SRNC      ;

UMTSCLDDRDRINDTRFFCLD(I).INTERA_DL_DATA                    := RDR_CET_WCE_HOUR(I).INTERA_DL_DATA                    ;
UMTSCLDDRDRINDTRFFCLD(I).BGR_DL_DATA                       := RDR_CET_WCE_HOUR(I).BGR_DL_DATA                       ;
UMTSCLDDRDRINDTRFFCLD(I).PS_STREA_DL_DATA                  := RDR_CET_WCE_HOUR(I).PS_STREA_DL_DATA                  ;
UMTSCLDDRDRINDTRFFCLD(I).CCH_DATA_CELL_DL                  := RDR_TPW_WCE_HOUR(I).CCH_DATA_CELL_DL                  ;

UMTSCLDDRDRINDTRFFCLD(I).MEH_REJECT_HSDSCH                 := RDR_TRF_WCE_HOUR(I).MEH_REJECT_HSDSCH                 ;
UMTSCLDDRDRINDTRFFCLD(I).HSDPA_ACCESS_USR_DEN              := RDR_TRF_WCE_HOUR(I).HSDPA_ACCESS_USR_DEN              ;

END LOOP;

--DBMS_OUTPUT.PUT_LINE(PCNT||' '||CNT);

IF C_RDR_SRV_WCE_HOUR%NOTFOUND THEN

   FORALL I IN UMTSCLDDRDRINDTRFFCLD.FIRST .. PCNT
   INSERT INTO CLDD_C_RADAR_AUX_HOUR VALUES UMTSCLDDRDRINDTRFFCLD(I);

   EXIT;

ELSE

   FORALL I IN UMTSCLDDRDRINDTRFFCLD.FIRST .. UMTSCLDDRDRINDTRFFCLD.LAST
   INSERT INTO CLDD_C_RADAR_AUX_HOUR VALUES UMTSCLDDRDRINDTRFFCLD(I);

END IF;

PCNT := 0;

END LOOP;

CLOSE C_RDR_SRV_WCE_HOUR;
CLOSE C_RDR_TRF_WCE_HOUR;
CLOSE C_RDR_CER_WCE_HOUR;
CLOSE C_RDR_CET_WCE_HOUR;
CLOSE C_RDR_TPW_WCE_HOUR;

COMMIT;

END P_RADAR_C_TLOAD_NQI_HOUR_INS;
